generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Incident {
  id              Int              @id @default(autoincrement())
  carId           Int
  reportedById    Int
  assignedToId    Int?
  title           String
  description     String
  severity        IncidentSeverity @default(LOW)
  status          IncidentStatus   @default(PENDING)
  type            IncidentType
  location        String?
  latitude        Float?
  longitude       Float?
  occurredAt      DateTime
  reportedAt      DateTime         @default(now())
  carReadingId    Int?
  images          String[]
  documents       String[]
  resolutionNotes String?
  estimatedCost   Decimal?         @db.Decimal(10, 2)
  actualCost      Decimal?         @db.Decimal(10, 2)
  resolvedAt      DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  updates         IncidentUpdate[]
  assignedTo      User?            @relation("IncidentAssignee", fields: [assignedToId], references: [id])
  car             Car              @relation(fields: [carId], references: [id], onDelete: Cascade)
  carReading      CarReading?      @relation(fields: [carReadingId], references: [id])
  reportedBy      User             @relation("IncidentReporter", fields: [reportedById], references: [id], onDelete: Cascade)

  @@index([carId])
  @@index([reportedById])
  @@index([assignedToId])
  @@index([status])
  @@index([severity])
  @@index([occurredAt])
  @@map("incidents")
}

model IncidentUpdate {
  id         Int                @id @default(autoincrement())
  incidentId Int
  userId     Int
  message    String             @db.VarChar(1000)
  updateType IncidentUpdateType
  createdAt  DateTime           @default(now())
  incident   Incident           @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([incidentId])
  @@index([userId])
  @@map("incident_updates")
}

model User {
  id                Int              @id @default(autoincrement())
  name              String
  email             String           @unique
  role              UserRole         @default(USER)
  password          String
  incidentUpdates   IncidentUpdate[]
  incidentsAssigned Incident[]       @relation("IncidentAssignee")
  incidentsReported Incident[]       @relation("IncidentReporter")

  @@map("users")
}

model Car {
  id           Int        @id @default(autoincrement())
  licensePlate String
  make         String
  model        String
  incidents    Incident[]
  carReadings  CarReading[]
  @@map("cars")
}

model CarReading {
  id              Int        @id @default(autoincrement())
  odometerReading Int
  reportedAt      DateTime   @default(now())
  incidents       Incident[]
  carId           Int
  car             Car        @relation(fields: [carId],references: [id],onDelete: Cascade)
  @@map("car_readings")
}

enum UserRole {
  USER
  MANAGER

  @@map("user_roles")
}

enum IncidentSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL

  @@map("incident_severities")
}

enum IncidentStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
  CANCELLED

  @@map("incident_statuses")
}

enum IncidentType {
  ACCIDENT
  BREAKDOWN
  THEFT
  VANDALISM
  MAINTENANCE_ISSUE
  TRAFFIC_VIOLATION
  FUEL_ISSUE
  OTHER

  @@map("incident_types")
}

enum IncidentUpdateType {
  STATUS_CHANGE
  ASSIGNMENT
  COMMENT
  COST_UPDATE
  RESOLUTION

  @@map("incident_update_types")
}
